function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { memo } from "react";
import { ContextObject as Context, useOwnContext } from "./hooks/useOwnContext";

var preventRemoval = function preventRemoval() {
  return false;
};

export var PersistStateOnUnmount = /*#__PURE__*/memo(function PersistStateOnUnmount(_ref) {
  var children = _ref.children;
  var context = useOwnContext();

  var newContext = _extends({}, context, {
    removeProp: preventRemoval
  });

  return /*#__PURE__*/React.createElement(Context.Provider, {
    value: newContext
  }, children);
});